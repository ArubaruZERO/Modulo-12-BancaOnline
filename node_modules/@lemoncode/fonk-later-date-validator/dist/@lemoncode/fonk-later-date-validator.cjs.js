'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fonk = require('@lemoncode/fonk');

var VALIDATOR_TYPE = 'LATER_DATE';
var defaultCustomArgs = {
  date: null,
  parseStringToDateFn: null,
  inclusive: false
};
var setCustomArgs = function setCustomArgs(customArgs) {
  defaultCustomArgs = Object.assign(Object.assign({}, defaultCustomArgs), customArgs);
};
var MISSING_DATE_ARGS = 'FieldValidationError: date custom arg is mandatory. Example: { customArgs: { date: new Date() } }.';
var MISSING_PARSE_ARGS = 'FieldValidationError: parseStringToDateFn custom arg is mandatory when value is string. Example: { customArgs: { parseStringToDateFn: (value) => new Date(value) } }.';
var defaultMessage = "Date isn't later than the one provided.";
var setErrorMessage = function setErrorMessage(message) {
  return defaultMessage = message;
};

var isDefined = function isDefined(value) {
  return value !== void 0 && value !== null && value !== '';
};

var isString = function isString(value) {
  return typeof value === 'string';
};

var parseToDate = function parseToDate(value, _ref) {
  var parseStringToDateFn = _ref.parseStringToDateFn;

  if (!parseStringToDateFn) {
    throw new Error(MISSING_PARSE_ARGS);
  }

  return parseStringToDateFn(value);
};

var isValid = function isValid(value, customArgs) {
  return customArgs.inclusive ? value >= customArgs.date : value > customArgs.date;
};

var validator = function validator(_ref2) {
  var value = _ref2.value,
      _ref2$message = _ref2.message,
      message = _ref2$message === void 0 ? defaultMessage : _ref2$message,
      _ref2$customArgs = _ref2.customArgs,
      customArgs = _ref2$customArgs === void 0 ? defaultCustomArgs : _ref2$customArgs;
  var args = Object.assign(Object.assign({}, defaultCustomArgs), customArgs);

  if (!args || !args.date) {
    throw new Error(MISSING_DATE_ARGS);
  }

  var valueAsDate = isString(value) ? parseToDate(value, args) : value;
  var succeeded = !isDefined(value) || isValid(valueAsDate, args);
  return {
    succeeded: succeeded,
    message: succeeded ? '' : fonk.parseMessageWithCustomArgs(message, args),
    type: VALIDATOR_TYPE
  };
};

var validator$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  setCustomArgs: setCustomArgs,
  setErrorMessage: setErrorMessage,
  validator: validator
});

exports.laterDate = validator$1;
